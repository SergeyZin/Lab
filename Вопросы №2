1. Допустим, у вас есть файл с данными, который называется ‘iris.csv’. Этот файл находится в папке ‘/data/’. Вы открываете его в текстовом редакторе и видите следующие первые строки: 
sepal length in cm; sepal width in cm; petal length in
cm; petal width in cm; class
5.1; 3.5; 1.4; 0.2; 0
Как должна выглядеть команда для считывания данных в датафрейм Pandas?
  Для считывания данных из файла iris.csv, расположенного в папке /data/, в датафрейм Pandas, команда должна выглядеть следующим образом:
    import pandas as pd
    df = pd.read_csv('/data/iris.csv', sep=';')
  Разберем эту команду по частям:
  import pandas as pd: Импортируем библиотеку Pandas и присваиваем ей сокращенное имя pd для удобства использования.
  pd.read_csv('/data/iris.csv', sep=';'): Вызываем функцию read_csv из библиотеки Pandas для считывания данных из CSV-файла.
  /data/iris.csv - полный путь к файлу данных iris.csv, который находится в папке /data/.
  sep=';' - указываем, что разделителем между значениями в файле является точка с запятой (;). Это необходимо, так как в первой строке файла заголовки столбцов разделены точкой с запятой.
  df = ...: Результат считывания данных из файла сохраняется в переменную df, которая представляет собой датафрейм Pandas.
  После выполнения этой команды, датафрейм df будет содержать данные из файла iris.csv, где первая строка станет заголовками столбцов, а остальные строки - значениями в этих столбцах.

2. Для набора данных Cars после удаления дубликатов выберите из полного датафрейма строки с индекса 69 по 322. Отсортируйте полученный датафрейм по колонке ‘Distance’ по убыванию. Какое значение колонки ‘Style’ у полученного датафрейма во второй строке сверху?
  Загрузите данные в DataFrame.
  Удалите дубликаты.
  Выберите строки с индекса 69 по 322.
  Отсортируйте результат по колонке 'Distance' по убыванию.
  Получите значение колонки 'Style' во второй строке после сортировки.
  Пример кода:
  import pandas as pd
  df = pd.read_csv('cars.csv')
  df = df.drop_duplicates()
  subset_df = df.iloc[69:323]
  sorted_df = subset_df.sort_values(by='Distance', ascending=False)
  second_row_style = sorted_df.iloc[1]['Style']
  print(second_row_style)
  Порядок выполнения пошагово:
  Импорт Pandas
  Загрузка данных в DataFrame
  Удаление дубликатов
  Выборка диапазона строк
  Сортировка по убыванию определенного столбца
  Доступ к конкретному элементу данных после сортировки

3. Для набора данных Cars оцените количество строк, которые были удалены после анализа гистограмм распределения и удаления аномальных значений
  Пример кода:
  import pandas as pd
  import matplotlib.pyplot as plt
  df = pd.read_csv('cars.csv')
  columns_of_interest = ['Distance', 'Price', 'Age']  # Предположим, что эти столбцы являются интересующими
  for column in columns_of_interest:
      plt.figure()
      df[column].hist(bins=50)
      plt.title(f'Histogram of {column}')
      plt.xlabel(column)
      plt.ylabel('Frequency')
      plt.show()
  def remove_outliers(df, column):
      Q1 = df[column].quantile(0.25)
      Q3 = df[column].quantile(0.75)
      IQR = Q3 - Q1
      lower_bound = Q1 - 1.5 * IQR
      upper_bound = Q3 + 1.5 * IQR
      return df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]
  initial_row_count = df.shape[0]
  for column in columns_of_interest:
      df = remove_outliers(df, column)
  final_row_count = df.shape[0]
  rows_removed = initial_row_count - final_row_count
  print(f'Количество удаленных строк: {rows_removed}')
  Порядок выполнения пошагово:
  Импорт библиотек
  Загрузка данных в DataFrame
  Визуализация распределения данных с помощью гистограмм
  Определение критериев для выявления аномалий (IQR)
  Реализация функции для удаления строк с аномалиями
  Подсчет количества удаленных строкИмпорт Pandas
  Загрузка данных в DataFrame
  Подсчет количества вхождений уникальных значений в столбце с помощью value_counts()
  Нахождение индекса (марки) с максимальным количеством вхождений через idxmax()
  Получение максимального значения (наибольшего количества вхождений) с помощью max()

4. Для набора данных Cars назовите самую распространенную марку автомобилей (столбец Make).
  import pandas as pd
  df = pd.read_csv('cars.csv')
  make_counts = df['Make'].value_counts()
  most_common_make = make_counts.idxmax()
  most_common_make_count = make_counts.max()
  print(f'Самая распространенная марка автомобилей: {most_common_make} (Количество: {most_common_make_count})')
  Порядок выполнения пошагово:
  Импорт Pandas
  Загрузка данных в DataFrame
  Подсчет количества вхождений уникальных значений в столбце с помощью value_counts()
  Нахождение индекса (марки) с максимальным количеством вхождений через idxmax()
  Получение максимального значения (наибольшего количества вхождений) с помощью max()

5. Визуализируйте скаттерограмму для двух столбцов — Distance и Year — набора данных Cars с использованием столбца Transmission в качестве цвета маркера (hue). К какому типу Transmission относится точка, которая наиболее близка к координатам (Year = 1980, Distance = 500 000)?
  Пример кода:
  import pandas as pd
  import seaborn as sns
  import matplotlib.pyplot as plt
  from scipy.spatial import KDTree
  df = pd.read_csv('cars.csv')
  plt.figure(figsize=(10, 6))
  scatter_plot = sns.scatterplot(data=df, x='Year', y='Distance', hue='Transmission', palette='viridis')
  plt.title('Scatter Plot of Distance vs Year with Transmission as Hue')
  plt.show()
  tree = KDTree(df[['Year', 'Distance']])
  dist, idx = tree.query([[1980, 500000]], k=1)
  nearest_point = df.iloc[idx[0]]
  nearest_transmission = nearest_point['Transmission']
  print(f'Тип Transmission для точки, ближайшей к (Year = 1980, Distance = 500000): {nearest_transmission}')
  Порядок выполнения пошагово:
  Импорт библиотек: pandas, seaborn, matplotlib, scipy.spatial
  Загрузка данных в DataFrame Pandas
  Создание скаттерограммы с использованием seaborn.scatterplot
  Использование KDTree для поиска ближайшей точки к заданным координатам
  Извлечение и вывод значения 'Transmission' для найденной точки
6. Представим, что вы визуализировали некий набор данных. Какие новые признаки, основанные на имеющихся, необходимо сконструировать, чтобы иметь возможность отделить все красные точки от всех синих точек с помощью прямой линии? 
  Для левого графика: создание нового признака как произведения координат, который будет иметь разные знаки для разных классов.
  Для правого графика: вычисление расстояния каждой точки до начала координат и нахождение максимального и минимального значений для разных классов.
  Использование найденных признаков (произведения координат или расстояния) для построения линейной разделяющей границы между классами.
